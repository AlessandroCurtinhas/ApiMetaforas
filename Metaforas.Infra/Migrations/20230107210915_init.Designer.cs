// <auto-generated />
using System;
using Metaforas.Infra.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Metaforas.Infra.Migrations
{
    [DbContext(typeof(ServerContext))]
    [Migration("20230107210915_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Metaforas.Domain.Entities.Frase", b =>
                {
                    b.Property<Guid>("IdFrase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FraseTexto")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("VARCHAR");

                    b.Property<Guid>("IdPensador")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioInativacao")
                        .HasColumnType("uuid");

                    b.HasKey("IdFrase");

                    b.HasIndex("IdPensador");

                    b.HasIndex("IdTime");

                    b.ToTable("Frases");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.Pensador", b =>
                {
                    b.Property<Guid>("IdPensador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdUsuario")
                        .HasColumnType("uuid");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioInativacao")
                        .HasColumnType("uuid");

                    b.HasKey("IdPensador");

                    b.HasIndex("IdUsuario")
                        .IsUnique();

                    b.ToTable("Pensadores");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.PensadorTime", b =>
                {
                    b.Property<Guid>("IdPensadorTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("IdPensador")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdTime")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioInativacao")
                        .HasColumnType("uuid");

                    b.HasKey("IdPensadorTime");

                    b.HasIndex("IdPensador");

                    b.HasIndex("IdTime");

                    b.ToTable("PensadorTimes");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.Time", b =>
                {
                    b.Property<Guid>("IdTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Ativo")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("DataAlteracao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DataInativacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid?>("UsuarioAlteracao")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsuarioCriacao")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("UsuarioInativacao")
                        .HasColumnType("uuid");

                    b.HasKey("IdTime");

                    b.HasIndex("Nome")
                        .IsUnique();

                    b.ToTable("Times");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.Frase", b =>
                {
                    b.HasOne("Metaforas.Domain.Entities.Pensador", "Pensador")
                        .WithMany("Frases")
                        .HasForeignKey("IdPensador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metaforas.Domain.Entities.Time", "Time")
                        .WithMany("Frases")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pensador");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.PensadorTime", b =>
                {
                    b.HasOne("Metaforas.Domain.Entities.Pensador", "Pensador")
                        .WithMany("PensadorTimes")
                        .HasForeignKey("IdPensador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Metaforas.Domain.Entities.Time", "Time")
                        .WithMany("PensadorTimes")
                        .HasForeignKey("IdTime")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pensador");

                    b.Navigation("Time");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.Pensador", b =>
                {
                    b.Navigation("Frases");

                    b.Navigation("PensadorTimes");
                });

            modelBuilder.Entity("Metaforas.Domain.Entities.Time", b =>
                {
                    b.Navigation("Frases");

                    b.Navigation("PensadorTimes");
                });
#pragma warning restore 612, 618
        }
    }
}
